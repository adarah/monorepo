---
name: Verify

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-plan:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: |
          echo "$GOOGLE_SERVICE_ACCOUNT" > /tmp/credentials.json
          bazel build --remote_cache=https://storage.googleapis.com/bazel_cache_bucket_adarah --google_credentials=/tmp/credentials.json //...
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~1.1
        if: github.event_name == 'pull_request'

      - name: Terraform format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        if: github.event_name == 'pull_request'

      - name: Terraform init
        id: init
        run: terraform init
        if: github.event_name == 'pull_request'
        working-directory: infrastructure

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true
        if: github.event_name == 'pull_request'
        working-directory: infrastructure

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        if: github.event_name == 'pull_request'
        working-directory: infrastructure

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "stdout:\n${{ steps.plan.outputs.stdout }}\nstderr:\n${{ steps.plan.outputs.stderr }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test
        run: |
          bazel test //...
